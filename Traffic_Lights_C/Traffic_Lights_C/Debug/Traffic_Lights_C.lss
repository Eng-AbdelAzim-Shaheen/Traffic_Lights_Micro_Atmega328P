
Traffic_Lights_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000266  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b3  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006db  00000000  00000000  00000b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038b  00000000  00000000  00001216  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000015a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b6  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000db  00000000  00000000  0000199e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 13 01 	call	0x226	; 0x226 <main>
  8e:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <count>:
#define F_CPU 1035000UL
#include <avr/io.h>
#include <util/delay.h>

void count(int x)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	64 97       	sbiw	r28, 0x14	; 20
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
  aa:	9c 01       	movw	r18, r24
	//0bvgfedcba 7-Segment Zero for Active
	int Seg[]={0b1000000,0b1111001,0b0100100,0b0110000,0b0011001,0b0010010,0b0000010,0b1111000,0b0000000,0b0010000};
  ac:	84 e1       	ldi	r24, 0x14	; 20
  ae:	e0 e0       	ldi	r30, 0x00	; 0
  b0:	f1 e0       	ldi	r31, 0x01	; 1
  b2:	de 01       	movw	r26, r28
  b4:	11 96       	adiw	r26, 0x01	; 1
  b6:	01 90       	ld	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	8a 95       	dec	r24
  bc:	e1 f7       	brne	.-8      	; 0xb6 <count+0x20>
	int y =0 ;
	
	if (x==3) {y=2;}
  be:	23 30       	cpi	r18, 0x03	; 3
  c0:	31 05       	cpc	r19, r1
  c2:	31 f0       	breq	.+12     	; 0xd0 <count+0x3a>
	else if (x==7) {y=9;}
  c4:	27 30       	cpi	r18, 0x07	; 7
  c6:	31 05       	cpc	r19, r1
  c8:	31 f0       	breq	.+12     	; 0xd6 <count+0x40>

void count(int x)
{
	//0bvgfedcba 7-Segment Zero for Active
	int Seg[]={0b1000000,0b1111001,0b0100100,0b0110000,0b0011001,0b0010010,0b0000010,0b1111000,0b0000000,0b0010000};
	int y =0 ;
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	9e c0       	rjmp	.+316    	; 0x20c <count+0x176>
	
	if (x==3) {y=2;}
  d0:	42 e0       	ldi	r20, 0x02	; 2
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	9b c0       	rjmp	.+310    	; 0x20c <count+0x176>
	else if (x==7) {y=9;}
  d6:	49 e0       	ldi	r20, 0x09	; 9
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	98 c0       	rjmp	.+304    	; 0x20c <count+0x176>
	
	for(; x>0 ;x--)
	{
		if (PORTC==(PORTC|(1<<0)) && PORTC==(PORTC|(1<<5))) 
  dc:	88 b1       	in	r24, 0x08	; 8
  de:	98 b1       	in	r25, 0x08	; 8
  e0:	91 60       	ori	r25, 0x01	; 1
  e2:	89 13       	cpse	r24, r25
  e4:	1d c0       	rjmp	.+58     	; 0x120 <count+0x8a>
  e6:	98 b1       	in	r25, 0x08	; 8
  e8:	88 b1       	in	r24, 0x08	; 8
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	98 13       	cpse	r25, r24
  ee:	18 c0       	rjmp	.+48     	; 0x120 <count+0x8a>
		{
			// R1 G2
			PORTB= Seg[y];
  f0:	fa 01       	movw	r30, r20
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	8c 0f       	add	r24, r28
  fc:	9d 1f       	adc	r25, r29
  fe:	e8 0f       	add	r30, r24
 100:	f9 1f       	adc	r31, r25
 102:	80 81       	ld	r24, Z
 104:	85 b9       	out	0x05, r24	; 5
			PORTD= Seg[y-3];	
 106:	fa 01       	movw	r30, r20
 108:	33 97       	sbiw	r30, 0x03	; 3
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	8c 0f       	add	r24, r28
 114:	9d 1f       	adc	r25, r29
 116:	e8 0f       	add	r30, r24
 118:	f9 1f       	adc	r31, r25
 11a:	80 81       	ld	r24, Z
 11c:	8b b9       	out	0x0b, r24	; 11
 11e:	69 c0       	rjmp	.+210    	; 0x1f2 <count+0x15c>
		}
		else if (PORTC==(PORTC|(1<<0)) && PORTC==(PORTC|(1<<4)))
 120:	88 b1       	in	r24, 0x08	; 8
 122:	98 b1       	in	r25, 0x08	; 8
 124:	91 60       	ori	r25, 0x01	; 1
 126:	89 13       	cpse	r24, r25
 128:	13 c0       	rjmp	.+38     	; 0x150 <count+0xba>
 12a:	98 b1       	in	r25, 0x08	; 8
 12c:	88 b1       	in	r24, 0x08	; 8
 12e:	80 61       	ori	r24, 0x10	; 16
 130:	98 13       	cpse	r25, r24
 132:	0e c0       	rjmp	.+28     	; 0x150 <count+0xba>
		{
			// R1 Y2
			PORTB= Seg[y];
 134:	fa 01       	movw	r30, r20
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	8c 0f       	add	r24, r28
 140:	9d 1f       	adc	r25, r29
 142:	e8 0f       	add	r30, r24
 144:	f9 1f       	adc	r31, r25
 146:	80 81       	ld	r24, Z
 148:	85 b9       	out	0x05, r24	; 5
			PORTD= Seg[y];
 14a:	80 81       	ld	r24, Z
 14c:	8b b9       	out	0x0b, r24	; 11
 14e:	51 c0       	rjmp	.+162    	; 0x1f2 <count+0x15c>
		}
		else if (PORTC==(PORTC|(1<<2)) && PORTC==(PORTC|(1<<3)))
 150:	88 b1       	in	r24, 0x08	; 8
 152:	98 b1       	in	r25, 0x08	; 8
 154:	94 60       	ori	r25, 0x04	; 4
 156:	89 13       	cpse	r24, r25
 158:	1d c0       	rjmp	.+58     	; 0x194 <count+0xfe>
 15a:	98 b1       	in	r25, 0x08	; 8
 15c:	88 b1       	in	r24, 0x08	; 8
 15e:	88 60       	ori	r24, 0x08	; 8
 160:	98 13       	cpse	r25, r24
 162:	18 c0       	rjmp	.+48     	; 0x194 <count+0xfe>
		{
			// G1 R2
			PORTB= Seg[y-3];
 164:	fa 01       	movw	r30, r20
 166:	33 97       	sbiw	r30, 0x03	; 3
 168:	ee 0f       	add	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	8c 0f       	add	r24, r28
 172:	9d 1f       	adc	r25, r29
 174:	e8 0f       	add	r30, r24
 176:	f9 1f       	adc	r31, r25
 178:	80 81       	ld	r24, Z
 17a:	85 b9       	out	0x05, r24	; 5
			PORTD= Seg[y];
 17c:	fa 01       	movw	r30, r20
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	8c 0f       	add	r24, r28
 188:	9d 1f       	adc	r25, r29
 18a:	e8 0f       	add	r30, r24
 18c:	f9 1f       	adc	r31, r25
 18e:	80 81       	ld	r24, Z
 190:	8b b9       	out	0x0b, r24	; 11
 192:	2f c0       	rjmp	.+94     	; 0x1f2 <count+0x15c>
		}
		else if (PORTC==(PORTC|(1<<1)) && PORTC==(PORTC|(1<<3)))
 194:	98 b1       	in	r25, 0x08	; 8
 196:	88 b1       	in	r24, 0x08	; 8
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	98 13       	cpse	r25, r24
 19c:	13 c0       	rjmp	.+38     	; 0x1c4 <count+0x12e>
 19e:	98 b1       	in	r25, 0x08	; 8
 1a0:	88 b1       	in	r24, 0x08	; 8
 1a2:	88 60       	ori	r24, 0x08	; 8
 1a4:	98 13       	cpse	r25, r24
 1a6:	0e c0       	rjmp	.+28     	; 0x1c4 <count+0x12e>
		{
			// Y1 R2
			PORTB= Seg[y];
 1a8:	fa 01       	movw	r30, r20
 1aa:	ee 0f       	add	r30, r30
 1ac:	ff 1f       	adc	r31, r31
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	8c 0f       	add	r24, r28
 1b4:	9d 1f       	adc	r25, r29
 1b6:	e8 0f       	add	r30, r24
 1b8:	f9 1f       	adc	r31, r25
 1ba:	80 81       	ld	r24, Z
 1bc:	85 b9       	out	0x05, r24	; 5
			PORTD= Seg[y];
 1be:	80 81       	ld	r24, Z
 1c0:	8b b9       	out	0x0b, r24	; 11
 1c2:	17 c0       	rjmp	.+46     	; 0x1f2 <count+0x15c>
		}
		else if (PORTC==(PORTC|(1<<0)) && PORTC==(PORTC|(1<<3)))
 1c4:	98 b1       	in	r25, 0x08	; 8
 1c6:	88 b1       	in	r24, 0x08	; 8
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	98 13       	cpse	r25, r24
 1cc:	12 c0       	rjmp	.+36     	; 0x1f2 <count+0x15c>
 1ce:	98 b1       	in	r25, 0x08	; 8
 1d0:	88 b1       	in	r24, 0x08	; 8
 1d2:	88 60       	ori	r24, 0x08	; 8
 1d4:	98 13       	cpse	r25, r24
 1d6:	0d c0       	rjmp	.+26     	; 0x1f2 <count+0x15c>
		{
			// R1 R2
			PORTB= Seg[y];
 1d8:	fa 01       	movw	r30, r20
 1da:	ee 0f       	add	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	8c 0f       	add	r24, r28
 1e4:	9d 1f       	adc	r25, r29
 1e6:	e8 0f       	add	r30, r24
 1e8:	f9 1f       	adc	r31, r25
 1ea:	80 81       	ld	r24, Z
 1ec:	85 b9       	out	0x05, r24	; 5
			PORTD= Seg[y];
 1ee:	80 81       	ld	r24, Z
 1f0:	8b b9       	out	0x0b, r24	; 11
		}
		y--;
 1f2:	41 50       	subi	r20, 0x01	; 1
 1f4:	51 09       	sbc	r21, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	97 e9       	ldi	r25, 0x97	; 151
 1f8:	68 e2       	ldi	r22, 0x28	; 40
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	91 50       	subi	r25, 0x01	; 1
 1fe:	60 40       	sbci	r22, 0x00	; 0
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <count+0x166>
 204:	00 c0       	rjmp	.+0      	; 0x206 <count+0x170>
 206:	00 00       	nop
	int y =0 ;
	
	if (x==3) {y=2;}
	else if (x==7) {y=9;}
	
	for(; x>0 ;x--)
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	31 09       	sbc	r19, r1
 20c:	12 16       	cp	r1, r18
 20e:	13 06       	cpc	r1, r19
 210:	0c f4       	brge	.+2      	; 0x214 <count+0x17e>
 212:	64 cf       	rjmp	.-312    	; 0xdc <count+0x46>
			PORTD= Seg[y];
		}
		y--;
		_delay_ms(1000);
	}
}
 214:	64 96       	adiw	r28, 0x14	; 20
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	f8 94       	cli
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	cd bf       	out	0x3d, r28	; 61
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <main>:

int main(void)
{
	DDRB=0X7F;
 226:	8f e7       	ldi	r24, 0x7F	; 127
 228:	84 b9       	out	0x04, r24	; 4
	DDRC=0XFF;
 22a:	9f ef       	ldi	r25, 0xFF	; 255
 22c:	97 b9       	out	0x07, r25	; 7
	DDRD=0X7F;
 22e:	8a b9       	out	0x0a, r24	; 10
	
    while (1) 
    {
			//     2GYRGYR1
			PORTC=0B100001; // R1 G2
 230:	81 e2       	ldi	r24, 0x21	; 33
 232:	88 b9       	out	0x08, r24	; 8
			count(7);
 234:	87 e0       	ldi	r24, 0x07	; 7
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 4b 00 	call	0x96	; 0x96 <count>
			PORTC=0B010001; // R1 Y2
 23c:	81 e1       	ldi	r24, 0x11	; 17
 23e:	88 b9       	out	0x08, r24	; 8
			count(3);
 240:	83 e0       	ldi	r24, 0x03	; 3
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 4b 00 	call	0x96	; 0x96 <count>
			PORTC=0B001100; // G1 R2
 248:	8c e0       	ldi	r24, 0x0C	; 12
 24a:	88 b9       	out	0x08, r24	; 8
			count(7);
 24c:	87 e0       	ldi	r24, 0x07	; 7
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 4b 00 	call	0x96	; 0x96 <count>
			PORTC=0B001010; // Y1 R2
 254:	8a e0       	ldi	r24, 0x0A	; 10
 256:	88 b9       	out	0x08, r24	; 8
			count(3);
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 4b 00 	call	0x96	; 0x96 <count>
 260:	e7 cf       	rjmp	.-50     	; 0x230 <main+0xa>

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
